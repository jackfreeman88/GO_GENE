test_calc.py
main.py
quit()
import os
os.mkdir('tmp_inner_2')
quit()
import pandas as pd
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read())
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read())[2].columns
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read(), header=True)
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read(), header=0)
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read(), header=0).columns
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read(), header=0)[2].columns
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read())[2].columns
quit()
import pandas as pd
 pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read())[2].columns
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read())[2].columns
pd.read_html(open('/mnt/isi5gup/GUP/RUNS/HHH2YBBXX/Bcl2Fastq/Ln_3_2629011dabc84021/Reports/html/HHH2YBBXX/all/all/all/laneBarcode.html','r').read(),header=0)[2].columns
q
quit()
import gup
quit()
import gup
quit()
import gup
from .src import bash_mgr
import bash_mgr
quit()
import gup
quit()
import gup
logout
quit()
a = ("dfasd"
"cvbcx")
a
quit()
a = {'a':1}
a
a['b']
quit()
import gup
q
quit()
import gup
db
dir(Mongo_Db)
dir(MongoDb)
dir(gup)
db = mongo_gup.MongoDb()
db = gup.mongo_gup.MongoDb()
dir(db)
db.getSampInfoFromSamp()
db.getIndexTypeFromSamp(55668)
db.getIndexTypeFromSamp("55668")
db.getIndexTypeFromSamp("62534")
ct()
dir(db)
getSampsAndInfoFromFcid(HHJ5YBBXX)
db.getSampsAndInfoFromFcid(HHJ5YBBXX)
db.getSampsAndInfoFromFcid('HHJ5YBBXX')
quit()
j = "__joiner__"
dir(j)
j.upper()
j.join({1,2,3})
j.join({'1','2','3'})
j.join(range(10))
j.join([str(el) for el in range(10)])
j.join({str(el) for el in range(10)})
quit 
quit()
from pathlib import Path
dir(Path)
quit()
z = 'a'
dir(z)
quit()
import gup
dir
dir(gup)
z =gup.calc_tuple
dir(z)
z =gup.calc_tuple.FilterCalcTuple
dir(z)
quit()
import gup
db = Mongo_gup.MongoDb()
db = Mongo_gup.MongoDB()
d
gup.mongo_gup.MongoDB()
gup.mongo_gup.MongoDb()
dir(gup)
dir(db)
db= gup.mongo_gup.MongoDb() 
dir(db)
db.getAllSamplesForSubmission(627)
db.getSampInfoFromSamp(62534)
db.getSampInfoFromSamp("62534")
db.getAllSamplesForSubmission("627")
q
q()
quit()
bool(0)
bool(2)
bool("sadfs")
bool("")
bool((1,2,3))
bool((,))
def my_fun(x):
	return 2*x
bool(my_fun(0))
bool(my_fun(1))
bool(my_fun)
my_fun is True
bool(my_fun)
quit()
import gup
ct = calc_tuple.FilterCalcTuple(db=gup.mongo_gup.MongoDb(), Sample="055668_0073762", **kwargs)
ct = gup.calc_tuple.FilterCalcTuple(db=gup.mongo_gup.MongoDb(), Sample="055668_0073762", **kwargs)
ct = gup.calc_tuple.FilterCalcTuple(db=gup.mongo_gup.MongoDb(), Sample="055668_0073762")
odir = ct.getUpstream().getSampOutdir(ct.Sample)
odir
sampOut = ct.getMetadata("outdir")
sampOut
quit()
ct = gup.calc_tuple.FilterCalcTuple(db=gup.mongo_gup.MongoDb(), Sample="055668_0073762")
import gup
ct = gup.calc_tuple.FilterCalcTuple(db=gup.mongo_gup.MongoDb(), Sample="055668_0073762")
odir = ct.getUpstream().getSampOutdir(ct.Sample)
odir
quit
quit()
import gup
quit()
import gup
dir(gup.FastqFilter)
dir(gup.fastq_filter.FastqFilter)
help(gup.fastq_filter.FastqFilter.__init__)
quit()
import gup
db = gup.mongo_db.MongoDb()
db = gup.mongo_gup.MongoDb()
bt_cts = [el for el in db.getAllCalcTuples() if el.node=="bt_rsem"]
len(bt_cts)
all_cts = db.getAllCalcTuples()
{el.node for el in all_cts}
len(all_cts)
 sample = "062534_0097634"
sample = "062534_0097634"
ct = gup.calc_tuple.FilterCalcTuple(db=db, Sample=sample)
ct.getUpstream(0
ct.getUpstream()
ct.getUpstream().getUpstream()
quit()
